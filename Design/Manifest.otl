Appendixie
TODO Actions
	[_] 52% Automagic:
		[_] 80% Triggering the builder
			: The builder is a script maybe? I dont know.
			[X] 100% evmenu time
				[X] learn menus - create test menu that talkes about building
					: just write a menu module in the World folder for now
			[X] make something happen when a PC walks into a random node
				: entering a room with the new node tag will cause the PC to
				: enter the menu
				[X] trigger a menu
					: BASED ON THE TYPE OF ROOM.
					[X] testmenu fires when entering an unfinished 
				[X] unfinished rooms typeclass tag	
					[X] modify the default character
						: so that a PC checks every room it enters to detect
						: an "unfinished room"
			[X] Learn about menus by implementing the NPC shop Tutorial
				: type it all in
			[X] teach @tun & door to use relative directions
				: sounds hard but I don't think.  Just need the PC to have
				: their .db.direction value set.
				[X] check if PC has dirction
				[X] if yes run a translation
			[_] teach test menu to roll on the tables
				: figure this out
		[_] 25% Auto-build prompt
			: When showing the suggested command, prompt the player to accept
			: the suggestion, implementing it
			: immediately
			[_] 0% On enter 'unfinished passage'
				[_] roll table - display result
				[_] menu - accept or over ride
					[_] [s] submit to fates edict
						[_] @caller.execute_cmd(@tun or @create)
					[_] [f] flout fickle fortune (at your peril) 
						[_] open menu
			[_] 50% start by moving the roll table method to world.tables
				[X] chance table to dictionary
				[_] finish method
	[_] 69% Relative directions
		: this terrible idea requires me to write code that on one hand tracks
		: the direction a PC is "facing" while travelling --- by setting it
		: based on the orientation of the exit used to enter the room --- and
		: on the other hand translate left/right/ahead/bening into north or
		: south etc.
		[X] Add a value/tag to every exit
		[X] Add an attribute to the character module
		[_] 33% On exit traverse, update the characters direction
			[_] on teleport... set a random direction
			[X] on normal exits
			[_] up/down or special exits
		[X] Use rotational math (modulus) to translate directions			
			[X] set up a utility command in world
		[_] 50% build some movement commands that work on this method
			[X] 100% directional moves
				[X] forward
				[X] back
				[X] left
				[X] right
				[X] slight left
				[X] slight right
				[X] slight back and left
				[X] slight back and right
			[_] allow shortcut movement commands
				[_] aliases for move right = r
				[_] twitchy movement (arrows or number pad)
		[_] Add a compass object.
			: possession of which causes the players current direction to
			: display at every "look" return
		[X] Building commands
			translate table results into fixed directions
				: now that I've proved I can do this. I'm still reconsidering
				: whether I want to include this function in the autobuild
				: commands anyways.
		Direction Translation
			: each exit has a direction  and upon passing through - the player
			: is aligned that way.  Then left, right, fwd and behind ... are
			: all relative.
	[_] Journal
		[_] free form journaling
			[_] add update_journal command
		[_] Autojournaling
			add methods
			determine which commands and actions will trigger auto-journal
		Journal parsing
			collect actions into a "day"
			add filters to read journal
				by date
				by zone
		Zoning
			see zone feature request
		Journal Script 
			: Is it a script? What else. Could be an character.db.object
			at character creation db.journal = ()
			commands go in the character typeclass

Feature Requests:
	Zones
		: Use tags to create dungeon zones.  Presently, Player made dungeons
		: chould have their own name.
		Auto-zone:
			: @tunnel and @dig create rooms, they need to know certain things
			: about the current zone, Only the character object can track.
			: Then when a character object calles @tunnel - it should pass the
			: characters current location ... well starting location stores a
			: zone too... so self.caller.location.tags is available. 
			:
			: Hmmm. @dig could me modified to take a zone argument. @dig
			: should probably set it, either require a zone or assume
			: something.
			:
			: Also it might be a good idea to set a warning, that shows up in
			: every room desc if it's missing a zone. This will remind me to
			: manually fix the zone.
			@tunnel: tag new rooms with a zone matching self.caller.location
		Starting Dungeon name
			See start command feature req.
		Dungeon Levels
			: Levels should also be tags. Same thing applies.
			@tunnel: tag new room with matching level tag
				unless direction = up or down then level changes.
		Zone and Level limits
			: this suggests perhaps setting some hard or soft size limits on
			: dungeons/zones and levels.  I.e. maybe set a max number of rooms
			: per level and a max number of levels to the dungeon.
		Level consequences
			: certain level can have hard coded rooms, events, encounters a la
			: nethack.
		Non-random zones
			: Builder can set up special zones
		Wilderness zone
			: one level. Non ramdom, or totally diff. tables.
		Town Zone
	Menus for Tables
		: This would replace or be an alternative to the table commands,
		: instead of passing arguments to table, the command would open up a
		: menu that let you choose from the tables. Ideal for leading ppl
		: through the various linked tables. BUT... difficult with manual
		: building.
	Building Commands/guide
		: Add a building command field to each table result, So that after
		: rolling. The table would suggest an Evennia building command and
		: proper arguments to implement the suggestion from the table.
	Lookable exits
		: looking at an exit should return a description (possibly brief
		: version) of the destination room.
	Menus
		New-room triggers menus - contextualize it all
			: so entering a "new room" will automatically roll on the
			: appropriate table
	Monsters
		copy the demo NPC?
		: I think it is able to follow the PC and attack until you die. Death
		: transports you to the cave.
	Honour System - tunable rp
		: this system 
		Combat RP
			Invenet a combat system that uses narrative rp
			subportinate to Journalling
		Engagement system
			: Obstacles like monsters and traps and weird effects can engage a
			: player character, 
	Magic System?
		RP based magic? Can it work?
		subportinate to Journalling
	Play Stormer help:
		: Mostly just helpful prompts to let them play how I've already been
		: playing.
		: But also some critical tools like the editor
		Start comand
			: instructions to please start by digging an exit with your own
			: name to your first room. Then start on Table V.
		[X] Some Place desc
			: let the default text of a tun destination be a reminder to roll
			: on Table I
[_] Evil links
	: opportunity to link doors and passages to eachother - @tun and @door
	: commands each generate a "new" room
	: upon editing/building rooms are usually renamed. The plan is to
	: program an option to link "new rooms" with other "new rooms" on
	: creation ... also occasionally link via secret or one-way door to
	: previously built rooms.
Done Actions
	[X] Die roller
		: works as ordered!
	[X] Tables
		: All the Appendix A tables are now available in game with the 
		: "table" command. It is possible to override the die roll in advance.
		: Another interesting over ride would be to simply print out every
		: result.
	[X] General Help
		: help via a command
	[X] Enable Editor in several commands.
		: either overload desc maybe by adding a switch, or create a
		: ans @edesc command to "edit descriptions"
		Actually that was built in by default to desc
	[X] Doors
		: Doors can be places with @tun/door of @door command.
		: This creates an exit which can be openned of closed. I cannot be
		: traversed unless open. The problem is that the commands only work on
		: one side of the door at a time. To fix this I belive I have to
		: rewrite the @tunnel command to use create_exit and link the two
		: sides of the door (two diff exits) at creation time.
		[X] plan - rebuild my @tunnel command
			: so that it can set attributes at start time.
Post Appendixie
	: Down the road I'd like to transition to a new game based on this idea
	: of random building and adventuring in tandem.
talk is cheap
	LIMBO
		not the boring place where babies and old men go..
		but the crazy chaotic land as described by TSR
		Pandemonium sounds good too.
	AD&D or what?
		: decide if and when to ditch the  AD&D DMG tables and build upon a
		: logical foundation of dungeon generation that is better suited for
		: the MUD play.
		Better foundation
			no need for relative directions
			less immaterial description tables
				or replace with more interesting tables
			tweak the tables 
		AD&D kitsch value
Obsolete/trash
	New objects
		new_exit
			: new_exits are objects that look like exits until traversed, then
			: they will spawn a random node
			: new_exits have attributes which dictate constraints on the
			: random node.
		random_node
			: random nodes are created  following the constraints set by the
			: new_exit that called it.
			: note: random_nodes will typically have at least one normal exit
			: (linking back through the new-exit that called it) and zero or
			: more new new_exits
			:wq
			:
	POC
		: The simplest proof of concept has to be a random room generating
		: script DungeonMaster like Griatch suggested - table 1 perhaps?
		: I don't know. Nothing is easy.
		:
		: Perhaps the first step is simply to to a cardinal direction
		: generator.
		:
		: Not really, exits are the first step
	Exits and Doors
		: All movement in this Evennia dungeon is conducted via exit objects.
		: So, probably all the random rolls will occur within exit objects.
		: So the game will be based around a custom exit typeclass.
		:
		: Perhaps the exit triggers a builder bot that populates new rooms
		: with random features including of course additional special exits
		: etc.
		:
		: No need a new object type - that looks like an exit or a room but
		: triggers the correct 
